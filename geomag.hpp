/*
MIT License

Copyright (c) 2019 Nathan Zimmerberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


// ../geomag.hpp Generated by python script wmmcodeupdate.py
/** \file
 * \author Nathan Zimmerberg (nhz2@cornell.edu)
 * \date 23 OCT 2019
 * \brief Header-only library to calculate the magnetic field in the International Terrestrial Reference System(ITRS).
 * \details Designed to minimize ram usage for embedded systems.

The data from WMM2015, is not subject to copyright protection.
Modifications are:
  using ITRS coordinates,
  conversion from nT to T,
  using a different spherical harmonics calculation, described in sections 3.2.4 and 3.2.5:
    Satellite Orbits Models, Methods and Applications,
      by Oliver Montenbruck and Eberhard Gill 2000
*/
#ifndef GEOMAG_HPP
#define GEOMAG_HPP

#include <cmath>
#include <stdint.h>

#ifdef __CUDACC__
#define CUDA_CALLABLE_MEMBER __host__ __device__
#else
#define CUDA_CALLABLE_MEMBER
#endif

namespace geomag
{
constexpr int NMAX= 12;//order of the Model
constexpr int NUMCOF= (NMAX+1)*(NMAX+2)/2;//number of coefficents
constexpr int32_t bits= 16;
/** inverse fixed point sqrt lookup table */
inline int32_t rsqrt(int32_t x){
    static const int32_t lut[2*NMAX+3]={65536,46341,37837,32768,29309,26755,24770,23170,21845,20724,19760,18919,18176,17515,16921,16384,15895,15447,15035,14654,14301,13972,13665,13377,13107,12853,12612};
    return lut[x-1];
}


struct ConstModel{
    float epoch;//decimal year
    float Main_Field_Coeff_C[NUMCOF];
    float Main_Field_Coeff_S[NUMCOF];
    float Secular_Var_Coeff_C[NUMCOF];
    float Secular_Var_Coeff_S[NUMCOF];
    /** Function for indexing the C spherical component n,m at dyear time.*/
    CUDA_CALLABLE_MEMBER inline int32_t C(int n, int m, float dyear) const{
      int index= (m*(2*NMAX-m+1))/2+n;
      return std::round((Main_Field_Coeff_C[index]+(dyear-epoch)*Secular_Var_Coeff_C[index])*10.0f);
    }
    /** Function for indexing the S spherical component n,m at dyear time.*/
    CUDA_CALLABLE_MEMBER inline int32_t S(int n, int m, float dyear) const{
      int index= (m*(2*NMAX-m+1))/2+n;
      return std::round((Main_Field_Coeff_S[index]+(dyear-epoch)*Secular_Var_Coeff_S[index])*10.0f);
    }
};
//mean radius of  ellipsoid in meters from section 1.2 of the WMM2015 Technical report
constexpr float EARTH_R= 6371200.0f;

typedef struct {
    float x;
    float y;
    float z;
} Vector;

/** Return the magnetic field in International Terrestrial Reference System coordinates, units Tesla.
 INPUT:
    position_itrs(Above the surface of earth): The location where the field is predicted, units m.
    dyear(should be around the epoch of the model): The decimal year, for example 2015.0
    WMM(): Magnetic field model to use.
 */
CUDA_CALLABLE_MEMBER inline Vector GeoMag(float dyear,Vector position_itrs, const ConstModel& WMM){
    float x= position_itrs.x;
    float y= position_itrs.y;
    float z= position_itrs.z;
    float px= 0;
    float py= 0;
    float pz= 0;
    float rsqrd= x*x+y*y+z*z;
    float r= std::sqrt(rsqrd);
    int32_t Vtop= std::round(EARTH_R/r*(1L<<16L));
    int32_t Wtop= 0;
    float temp= EARTH_R/rsqrd;
    float a= x*temp;
    float b= y*temp;
    float f= z*temp;
    float g= EARTH_R*temp;

    int n,m;
    //first m==0 row, just solve for the Vs
    float Vtop= EARTH_R/sqrtf(rsqrd);//V0,0
    float Wtop= 0;//W0,0
    float Vprev= 0;
    float Wprev= 0;
    float Vnm= Vtop;
    float Wnm= Wtop;

    //iterate through all ms
    for ( m = 0; m < NMAX+1; m++)
    {
        // iterate through all ns
        for (n = m; n <= NMAX+1; n++)
        {
            if (n==m){
                if(m!=0){
                    temp= Vtop;
                    Vtop= (2*m-1)*(a*Vtop-b*Wtop);
                    Wtop= (2*m-1)*(a*Wtop+b*temp);
                    Vprev= 0;
                    Wprev= 0;
                    Vnm= Vtop;
                    Wnm= Wtop;
                }
            }
            else{
                temp= Vnm;
                float invs_temp=1.0f/((float)(n-m));
                Vnm= ((2*n-1)*f*Vnm - (n+m-1)*g*Vprev)*invs_temp;
                Vprev= temp;
                temp= Wnm;
                Wnm= ((2*n-1)*f*Wnm - (n+m-1)*g*Wprev)*invs_temp;
                Wprev= temp;
            }
            if (m<NMAX && n>=m+2){
                px+= 0.5f*(n-m)*(n-m-1)*(WMM.C(n-1,m+1,dyear)*Vnm+WMM.S(n-1,m+1,dyear)*Wnm);
                py+= 0.5f*(n-m)*(n-m-1)*(-WMM.C(n-1,m+1,dyear)*Wnm+WMM.S(n-1,m+1,dyear)*Vnm);
            }
            if (n>=2 && m>=2){
                px+= 0.5f*(-WMM.C(n-1,m-1,dyear)*Vnm-WMM.S(n-1,m-1,dyear)*Wnm);
                py+= 0.5f*(-WMM.C(n-1,m-1,dyear)*Wnm+WMM.S(n-1,m-1,dyear)*Vnm);
            }
            if (m==1 && n>=2){
                px+= -WMM.C(n-1,0,dyear)*Vnm;
                py+= -WMM.C(n-1,0,dyear)*Wnm;
            }
            if (n>=2 && n>m){
                pz+= (n-m)*(-WMM.C(n-1,m,dyear)*Vnm-WMM.S(n-1,m,dyear)*Wnm);
            }
        }
    }
    return {-px*1.0E-9f,-py*1.0E-9f,-pz*1E-9f};
}

// Model parameters
constexpr
ConstModel WMM2015 = {2015.000000,
{0.0,-29438.5,-2445.3,1351.1,907.2,-232.6,69.5,81.6,24.0,5.4,-1.9,3.1,-2.0,-1501.1,3012.5,-2352.3,813.7,360.1,67.4,-76.1,8.6,8.8,-6.5,-1.5,-0.3,1676.6,1225.6,120.3,192.4,72.8,-6.8,-16.9,3.1,0.2,-2.3,0.4,581.9,-335.0,-141.0,-129.8,51.9,-3.2,-3.1,0.6,2.1,1.3,70.3,-157.4,-29.0,15.0,-20.6,0.6,-0.6,-0.9,-0.9,4.3,13.2,9.3,13.3,-13.3,1.7,0.6,0.9,-70.9,-2.8,11.7,-0.1,-0.7,-0.7,0.1,6.7,-16.0,8.7,2.1,0.2,0.5,-2.0,-9.1,2.3,1.7,-0.4,-10.5,-1.8,-0.2,-0.4,-3.6,0.4,0.2,3.5,-0.9,0.0},
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4796.2,-2845.6,-115.3,283.4,47.4,-20.7,-54.1,10.2,-21.6,3.3,-0.1,-1.0,-642.0,245.0,-188.6,196.9,33.2,-19.4,-18.1,10.8,-0.3,2.1,0.5,-538.3,180.9,-119.4,58.8,5.6,13.2,11.7,4.6,-0.7,1.8,-329.5,16.1,-66.5,24.4,-14.6,-6.8,4.4,-1.1,-2.2,100.1,7.3,3.3,16.2,-6.9,-7.9,0.7,0.3,62.5,-27.5,5.7,7.8,-0.6,-0.2,0.7,-2.3,-9.1,1.0,-4.1,-2.1,-0.1,2.2,-3.9,-2.8,-1.5,0.3,8.5,-1.1,-2.5,0.2,-8.7,-2.0,-0.9,-2.3,-0.2,0.7},
{0.0,10.7,-8.6,3.1,-0.4,-0.2,-0.5,0.2,0.0,0.0,0.0,0.0,0.1,17.9,-3.3,-6.2,0.8,0.1,-0.2,-0.2,0.1,-0.1,0.0,0.0,0.0,2.4,-0.4,-9.2,-1.4,-0.6,-0.4,-0.5,-0.1,-0.1,-0.1,0.0,-10.4,4.0,0.0,2.4,1.3,0.5,0.4,0.3,0.1,0.1,-4.2,1.3,-1.1,0.2,-0.2,-0.5,-0.1,0.0,-0.1,3.8,0.3,-0.4,0.4,-0.2,-0.1,0.0,0.0,1.5,-0.9,0.2,0.1,-0.1,0.0,0.1,0.3,-0.4,0.0,0.0,0.0,0.0,0.3,-0.2,-0.2,0.0,0.0,-0.1,-0.1,0.0,0.0,-0.2,-0.1,0.0,-0.1,0.0,0.0},
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-26.8,-27.1,8.4,-0.6,0.4,0.0,0.7,-0.3,-0.2,0.1,0.0,0.0,-13.3,-0.4,5.3,1.6,-2.2,0.5,0.3,-0.1,-0.1,0.1,0.0,2.3,3.0,-1.1,-0.7,-0.2,0.3,-0.2,0.0,0.0,-0.1,-5.3,3.3,0.1,-0.1,0.6,0.1,0.0,0.1,0.0,0.1,1.0,-0.7,-0.1,0.1,-0.2,0.0,0.0,1.3,0.1,-0.2,0.0,0.1,0.0,0.0,0.1,0.3,-0.2,-0.1,0.1,0.0,0.0,0.4,-0.2,0.0,0.0,0.3,0.1,-0.1,0.0,-0.1,0.0,0.0,-0.1,0.0,0.0}};

constexpr
ConstModel WMM2015v2 = {2015.000000,
{0.0,-29438.2,-2444.5,1351.8,907.5,-232.9,69.4,81.7,24.2,5.5,-2.0,3.0,-2.0,-1493.5,3014.7,-2351.6,814.8,360.1,67.7,-75.9,8.9,8.8,-6.1,-1.4,-0.1,1679.0,1223.6,117.8,191.7,72.3,-7.1,-16.9,3.0,0.2,-2.3,0.5,582.3,-335.6,-141.3,-129.1,52.2,-3.1,-3.2,0.6,2.1,1.2,69.7,-157.2,-28.4,15.0,-20.7,0.6,-0.5,-0.8,-0.9,7.7,13.6,9.1,13.3,-13.2,1.8,0.6,0.9,-70.3,-3.0,11.6,-0.1,-0.7,-0.7,0.1,5.9,-16.3,8.7,2.2,0.1,0.6,-2.1,-9.1,2.4,1.7,-0.4,-10.4,-1.8,-0.2,-0.5,-3.6,0.4,0.2,3.5,-0.9,-0.0},
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4796.3,-2842.4,-113.7,283.3,46.9,-20.1,-54.3,10.1,-21.8,3.3,-0.0,-1.0,-638.8,246.5,-188.6,196.5,32.8,-19.5,-18.3,10.7,-0.4,2.1,0.3,-537.4,180.7,-119.9,59.1,6.0,13.3,11.8,4.6,-0.6,1.8,-330.0,16.0,-67.1,24.5,-14.5,-6.8,4.4,-1.1,-2.2,100.6,8.1,3.5,16.2,-6.9,-7.9,0.7,0.3,61.9,-27.7,6.0,7.9,-0.6,-0.2,0.7,-2.9,-9.2,1.0,-4.2,-2.1,-0.1,2.4,-3.9,-2.9,-1.5,0.3,8.5,-1.1,-2.6,0.2,-8.8,-2.0,-0.9,-2.3,-0.2,0.8},
{0.0,7.0,-11.0,2.4,-0.8,-0.3,-0.8,-0.3,-0.1,-0.1,0.0,-0.0,0.0,9.0,-6.2,-5.7,-0.9,0.6,-0.5,-0.2,0.2,-0.1,-0.0,0.0,0.0,0.3,2.0,-6.5,-0.8,-0.1,-0.3,-0.2,-0.0,-0.1,-0.0,-0.0,-11.0,5.2,0.1,1.6,0.9,0.5,0.4,0.2,0.0,0.0,-4.0,1.2,-1.6,0.1,-0.1,-0.4,-0.1,-0.0,-0.1,1.4,0.0,-0.6,0.4,0.0,-0.2,-0.1,-0.0,1.2,-0.9,0.4,0.3,-0.0,0.0,0.0,0.7,-0.1,0.0,-0.1,-0.0,-0.0,0.4,-0.0,-0.2,-0.0,0.0,-0.3,-0.1,-0.1,-0.0,-0.0,-0.0,-0.0,-0.1,-0.0,-0.1},
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-30.2,-29.6,6.5,-0.4,0.2,0.3,0.6,-0.4,-0.3,0.0,0.0,-0.0,-17.3,-0.8,5.8,2.3,-1.5,0.5,0.6,0.1,0.1,0.1,0.0,-2.0,3.8,-0.0,-1.2,-0.8,-0.1,-0.4,-0.2,0.0,-0.1,-3.5,3.3,0.4,-0.2,0.6,0.3,0.1,0.1,0.1,-0.6,0.2,-1.1,-0.2,0.1,-0.1,-0.0,-0.0,1.3,0.1,-0.5,-0.0,0.1,-0.0,0.0,0.2,0.5,-0.1,-0.0,0.1,-0.0,0.1,0.5,-0.1,-0.0,0.0,0.2,0.2,-0.1,0.0,-0.0,-0.0,-0.0,-0.1,0.0,-0.1}};

constexpr

ConstModel WMM2020 = {2020.000000,
{0.0,-29404.5,-2500.0,1363.9,903.1,-234.4,65.9,80.6,23.6,5.0,-1.9,3.0,-2.0,-1450.7,2982.0,-2381.0,809.4,363.1,65.6,-76.8,9.8,8.2,-6.2,-1.4,-0.1,1676.8,1236.2,86.2,187.8,73.0,-8.3,-17.5,2.9,-0.1,-2.5,0.5,525.7,-309.4,-140.7,-121.5,56.5,-0.4,-1.4,1.7,2.4,1.3,47.9,-151.2,-36.2,15.8,-21.1,-1.1,-0.9,-0.9,-1.2,13.7,13.5,6.4,15.3,-13.3,0.6,0.3,0.7,-64.7,-7.2,13.7,1.1,-0.9,-0.7,0.3,9.8,-16.5,8.9,1.9,-0.1,0.5,-0.3,-9.3,1.4,1.4,-0.2,-11.9,-2.4,-0.6,-0.5,-3.9,0.2,0.1,3.1,-1.1,-0.3},
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4652.9,-2991.6,-82.2,282.0,47.7,-19.1,-51.4,8.4,-23.3,3.4,-0.0,-1.2,-734.8,241.8,-158.4,208.4,25.0,-16.8,-15.3,11.1,-0.2,2.6,0.5,-542.9,199.8,-121.3,52.7,2.3,12.8,9.8,3.5,-0.5,1.3,-350.1,32.2,-64.4,23.5,-11.8,-5.1,4.8,-0.4,-1.8,99.1,9.0,-2.2,14.9,-6.2,-8.6,0.6,0.1,68.1,-27.2,3.6,7.8,-0.1,-0.2,0.7,-1.9,-6.9,0.4,-4.2,-1.7,-0.1,2.8,-1.5,-3.4,-1.6,0.6,9.7,-0.1,-3.0,0.2,-8.8,-2.0,-0.9,-2.6,-0.0,0.5},
{0.0,6.7,-11.5,2.8,-1.1,-0.3,-0.6,-0.1,-0.1,-0.1,0.0,-0.0,0.0,7.7,-7.1,-6.2,-1.6,0.6,-0.4,-0.3,0.1,-0.2,-0.0,-0.1,-0.0,-2.2,3.4,-6.0,-0.7,0.5,-0.1,-0.1,-0.0,-0.0,-0.0,-0.0,-12.2,5.4,0.1,1.4,0.7,0.5,0.4,0.2,0.0,0.0,-5.5,1.2,-1.4,0.2,-0.1,-0.3,-0.1,-0.0,-0.0,1.0,-0.0,-0.5,0.4,-0.0,-0.2,-0.1,-0.0,0.8,-0.8,0.5,0.3,-0.0,0.0,0.0,1.0,0.0,-0.0,-0.1,-0.0,-0.0,0.4,-0.0,-0.2,-0.1,0.0,-0.4,-0.1,-0.1,-0.0,-0.0,-0.1,-0.0,-0.1,-0.0,-0.1},
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-25.1,-30.2,5.7,0.2,0.1,0.1,0.5,-0.3,-0.3,-0.0,-0.0,-0.0,-23.9,-1.0,6.9,2.5,-1.8,0.6,0.7,0.2,0.1,0.1,0.0,1.1,3.7,-0.9,-1.4,-0.7,-0.2,-0.4,-0.3,0.0,-0.1,-5.6,3.0,0.9,-0.2,0.5,0.4,0.1,0.2,0.1,0.5,0.1,-1.2,-0.3,0.1,-0.2,-0.0,-0.0,1.0,0.2,-0.5,-0.0,0.1,0.0,0.0,0.3,0.4,-0.2,-0.0,0.1,-0.0,0.1,0.5,-0.1,-0.0,0.1,0.2,0.2,-0.1,-0.0,-0.0,0.0,-0.0,-0.0,0.0,-0.1}};

}
#endif /* GEOMAG_HPP */